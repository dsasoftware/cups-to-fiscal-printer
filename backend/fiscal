#! /bin/sh
"true" '''\'
if command -v python2 > /dev/null; then
  exec python2 "$0" "$@"
else
  exec python "$0" "$@"
fi
exit $?
'''

#    CUPS Cloudprint - Print via Google Cloud Print
#    Copyright (C) 2011 Simon Cadman
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.


def serial_ports():
    """Lists serial ports

    :raises EnvironmentError:
        On unsupported or unknown platforms
    :returns:
        A list of available serial ports
    """

    import glob, serial

    if sys.platform.startswith('win'):
        ports = ['COM' + str(i + 1) for i in range(256)]

    elif sys.platform.startswith('linux') or sys.platform.startswith('cygwin'):
        # this is to exclude your current terminal "/dev/tty"
        ports = glob.glob('/dev/tty[A-Za-z]*')

    elif sys.platform.startswith('darwin'):
        ports = glob.glob('/dev/tty.*')

    else:
        raise EnvironmentError('Unsupported platform')

    result = []
    for port in ports:
        try:
            s = serial.Serial(port)
            s.close()
            result.append(port)
        except (OSError, serial.SerialException):
            pass
    return result





if __name__ == '__main__':  # pragma: no cover
    import sys
    import os
    import subprocess
    import logging



    logging.basicConfig(filename='/tmp/writingLog.log', level=logging.INFO)
    logging.info("ARRANCANDOOOO")
    TMP_FOLDER = '/tmp/fiscal_spooler/'



    if not os.path.exists(TMP_FOLDER):
    	os.makedirs(TMP_FOLDER)


    if len(sys.argv) == 1:
		# Without arguments should give backend info.
		# This is also used when lpinfo -v is issued, where it should include "direct this_backend"
		sports = serial_ports()
		if len(sports) == 0:
			sys.stdout.write("direct fiscal \"Unknown\" \"Direct Fiscal Printing para Impresoras Fiscales\"\n")
		else:
			for serial in sports:
				sys.stdout.write( "direct fiscal \"fiscal:"+serial+"\" \"Direct Fiscal Printing para Impresoras Fiscales\"\n" )
		sys.stdout.flush()
		logging.info("salio porque vino  1solo comando")
		sys.exit(0)




    if len(sys.argv) not in (6,7):
        sys.stderr.write("ERROR: Usage: %s job-id user title copies options [file]\n" % sys.argv[0])
        logging.info("error de uso vinieron la cantidad de comandos incorrectos	")
        sys.exit(0)

   

    uri = os.getenv('DEVICE_URI')
    cupsprintername = os.getenv('PRINTER')
    if uri is None:
        message = 'URI must be "EJ: fiscal:/dev/ttyUSB0"!\n'
        sys.stdout.write(message)
        sys.exit(255)
 

    result = 0

    # read file as pdf
    sys.stderr.write("INFO: A punto de imprimir con el spooler\n")

    fiscalPrinter = 'ttyUSB0'
    spoolerHasar = ["spooler", "-p"+fiscalPrinter,
                          "-b "+TMP_FOLDER, "-d "+TMP_FOLDER+"spooler.log"]


    logging.info(sys.argv[6])
    logging.info(uri)
    # p = subprocess.Popen(spoolerHasar, stdout=subprocess.PIPE, stdin=subprocess.PIPE)
    comando = "/usr/bin/spooler -pfiscalprinter -f "+sys.argv[6]+" -b "+TMP_FOLDER+" -d "+TMP_FOLDER+"spooler.log"
    logging.info(comando)
    p = subprocess.call(comando, shell=True)

    logging.info("la salida es esta %s" % p)
    sys.stderr.write("INFO: Spooler salida %s " % p)

    sys.exit(0)




